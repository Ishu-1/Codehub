generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id           String         @id 
  username     String?       @unique @default("temp_username") // Temporary default
  email        String       @unique
  //passwordHash String       @default("temp_password")         // Temporary default
  createdAt    DateTime     @default(now())
  submissions  Submission[]
}

model Problem {
  id           Int          @id @default(autoincrement())
  title        String       @unique
  slug         String       @unique
  structure    String       // structure of the problem used for code generation
  description  String
  inputFormat  String
  outputFormat String
  constraints  String
  sampleInput  String
  sampleOutput String
  difficulty   Difficulty
  createdAt    DateTime     @default(now())
  // testCases    String?      // JSON string for test cases, if needed
  // testCases    TestCase[]
  submissions  Submission[]
  tags         ProblemTag[]

  boilerplates ProblemBoilerplate[]
}

model ProblemBoilerplate {
  id         Int      @id @default(autoincrement())
  problemId  Int
  languageId Int
  code       String   @db.Text    // Boilerplate code for the problem in the specific language
  fullcode   String?  @db.Text    // Full boilerplate code (including imports, etc.)

  problem    Problem  @relation(fields: [problemId], references: [id])
  language   Language @relation(fields: [languageId], references: [id])

  @@unique([problemId, languageId]) // Ensure only one boilerplate per language per problem
}


// model TestCase {
//   id             Int       @id @default(autoincrement())
//   problemId      Int
//   inputUrl       String    // S3 URL for input
//   outputUrl      String    // S3 URL for expected output
//   isSample       Boolean   @default(false)

//   problem        Problem   @relation(fields: [problemId], references: [id])
//   results        submissionTestCaseResults[]
// }

model Tag {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  problems  ProblemTag[]
}

model ProblemTag {
  id        Int      @id @default(autoincrement())
  problemId Int
  tagId     Int

  problem   Problem @relation(fields: [problemId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@unique([problemId, tagId])
}

model Language {
  id            Int       @id @default(autoincrement())
  judge0Id      Int       @unique   // Maps to Judge0's language_id
  name          String    @unique
  version       String?
  fileExtension String?

  submissions   Submission[]
  boilerplates  ProblemBoilerplate[]
}

model Submission {
  id             Int       @id @default(autoincrement())
  userId         String
  problemId      Int
  languageId     Int
  code           String
  token          String     // Judge0 token
  statusId       Int        // Judge0 status_id (1 = AC, 3 = CE, etc.)
  stdout         String?
  stderr         String?
  compileOutput  String?
  message        String?
  time           String?    // Judge0 returns time as string, e.g., "0.123"
  memory         Int?       // Memory in KB
  createdAt      DateTime   @default(now())

  user           User       @relation(fields: [userId], references: [id])
  problem        Problem    @relation(fields: [problemId], references: [id])
  language       Language   @relation(fields: [languageId], references: [id])
  results        submissionTestCaseResults[]
}

// model submissionTestCaseResults {
//   id           Int       @id @default(autoincrement())
//   submissionId Int
//   // testCaseId   Int
//   passed String // -1 for processing, 0 for failed, 1 for passed

//   submission   Submission @relation(fields: [submissionId], references: [id])
//   // testCase     TestCase   @relation(fields: [testCaseId], references: [id])

//   // @@unique([submissionId])
// }

// model submissionTestCaseResultss {
//   id           Int       @id @default(autoincrement())
//   submissionId Int
//   // testCaseId   Int
//   passed Int // -1 for processing, 0 for failed, 1 for passed

//   submission   Submission @relation(fields: [submissionId], references: [id])
//   // testCase     TestCase   @relation(fields: [testCaseId], references: [id])

//   // @@unique([submissionId])
// }

model submissionTestCaseResults {
  id           Int       @id @default(autoincrement())
  submissionId Int
  // testCaseId   Int
  passed Int // -1 for processing, 0 for failed, 1 for passed

  submission   Submission @relation(fields: [submissionId], references: [id])
  // testCase     TestCase   @relation(fields: [testCaseId], references: [id])

  // @@unique([submissionId])
}